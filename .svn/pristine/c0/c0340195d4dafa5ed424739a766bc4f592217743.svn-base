import React, { Component } from 'react'
import { Link } from 'react-router'
import { Modal, Button, Input, Select, Checkbox, Tooltip, Icon, message } from 'antd'
import NProgress from 'nprogress'
import './eventManageView.scss'


export default class EventManageView extends Component {
	constructor(props){
		super(props)
		this.state = {
			event:{
				"platform":"1",
                "date":"20170509",
      			"appkey":"sads213",
                "appVersion":"all"
			},
			createEventVisible:false,
			updateEventVisible:false,
			"id":"",
			"id2":"",
			eventId:"",
			eventName:"",
        	eventUse:""
		}
	}
	componentWillMount(){
		console.log(this.props)
		const { eventManage } = this.props
		eventManage(this.state.event,() => {
            NProgress.done()
        }, () => {
            NProgress.done()
        })
	}
	createEvent(){
		this.setState({createEventVisible:true})
	}
	handleCancel(){
		this.setState({createEventVisible:false})
	}
	handleCancel2(){
		this.setState({updateEventVisible:false})
	}
	handleOk(){
		const { eventUpDateManage,eventManage } = this.props
		eventUpDateManage({
			"platform":"1",
	     	"id":"",
	        "appkey":"sads213",
	        "appVersion":"All",
	        "eventId":this.state.eventId,
	        "eventName":this.state.eventName,
	        "eventUse":this.state.eventUse
		},() => {
            NProgress.done()
	        this.setState({createEventVisible: false});
	        message.success('添加成功')
	        eventManage(this.state.event,() => {
            NProgress.done()
	        }, () => {
	            NProgress.done()	           
	        })
        }, () => {
            NProgress.done()
           	 message.error('添加失败')
		}
		)
	}
	handleOk2(){
		const { eventUpDateManage,eventManage } = this.props
		eventUpDateManage({
			"platform":"1",
	     	"id":this.state.id2,
	        "appkey":"sads213",
	        "appVersion":"All",
	        "eventId":this.state.eventId,
	        "eventName":this.state.eventName,
	        "eventUse":this.state.eventUse
		},() => {
            NProgress.done()
	        this.setState({createEventVisible: false});
	        message.success('更新成功')
	        eventManage(this.state.event,() => {
            NProgress.done()
	        }, () => {
	            NProgress.done()	           
	        })
        }, () => {
            NProgress.done()
           	 message.error('更新失败')
		}
		)
		this.setState({updateEventVisible: false})
	}
	update(e){
		let id = e.currentTarget.parentNode.parentNode.getAttribute('data-value')
		this.setState({'id2':id})
		const { dataTable,eventUpDateManage,eventManage } = this.props
		dataTable.map((item,i) => {
			if(item.id == id){
				this.setState({eventId:item.eventId,eventName:item.eventName,eventUse:item.eventUse})
			}
		})
		this.setState({updateEventVisible: true})
	}
	delete(e){
		let id = e.currentTarget.parentNode.parentNode.getAttribute('data-value')
		const { eventDeleteManage,eventManage } = this.props
		eventDeleteManage({
			id
		},() => {
            NProgress.done()
	        this.setState({createEventVisible: false});
	        message.success('删除成功')
	        eventManage(this.state.event,() => {
            NProgress.done()
	        }, () => {
	            NProgress.done()	           
	        })
        }, () => {
            NProgress.done()
        })
	}
	render () {
		const { dataTable } = this.props
		return (
				<div className="eve">
					<div className="top">
						<div className="list">自定义事件</div>
						<div className="btn3" onClick={(e) => this.createEvent(e)}>添加自定义事件</div>
					</div>
					<div className="tb">
						<table>
							<tbody>
								<tr style={{'background':'#F5F6FA','color':'#666'}}>
									<td style={{'width':'15%'}}>事件ID</td>
									<td style={{'width':'15%'}}>事件名称</td>
									<td style={{'width':'45%'}}>事件用途</td>
									<td style={{'width':'25%'}}>操作</td>
								</tr>
								{
				                  dataTable.map((item, index) => {
				                    return (
				                      <tr key={item.id} data-value={item.id}>
										<td style={{'width':'15%'}}>{item.eventId}</td>
										<td style={{'width':'15%'}}>{item.eventName}</td>
										<td style={{'width':'45%'}}>{item.eventUse}</td>
										<td style={{'width':'25%'}}>			
											<span onClick={e=>this.update(e)}>修改</span>
											<span onClick={e=>this.delete(e)}>删除</span>
											<span><Link to={`home/eventDetails.html?eventId=${item.eventId}`}>查看数据</Link></span>
										</td>
									</tr>
				                    )
				                  })
				                }					
							</tbody>
						</table>
						<div className="tableFooter"></div>
					</div>
					<Modal 
						title="注册自定义事件"
						visible={this.state.createEventVisible}
          				onOk={(e) => this.handleOk(e)} 
          				onCancel={(e) => this.handleCancel(e)}
          				cancelText="取消" okText="确定"
        			>
          				<div className='list'>
          					<span className='title'><b style={{color: '#F00'}}>*</b> 事件ID:</span>         					
    						<Input placeholder="请输入事件ID" onChange={(e) => this.setState({eventId: e.target.value})}/>
          				</div>
          				<div className='list'>
          					<span className='title'><b style={{color: '#F00'}}>*</b> 事件名称:</span>          					
    						<Input placeholder="请输入事件名称" onChange={(e) => this.setState({eventName: e.target.value})}/>    
  						</div>
          				<div className='list'>
          					<span style={{ height: '82px', lineHeight: '82px' }} className='title'>事件用途:</span>
          					<Input type="textarea" rows={4} onChange={(e) => this.setState({eventUse: e.target.value})}/>
          				</div>
        			</Modal>
        			<Modal 
						title="更新自定义事件"
						visible={this.state.updateEventVisible}
          				onOk={(e) => this.handleOk2(e)} 
          				onCancel={(e) => this.handleCancel2(e)}
          				cancelText="取消" okText="确定"
        			>
          				<div className='list'>
          					<span className='title'><b style={{color: '#F00'}}>*</b> 事件ID:</span>         					
    						<Input placeholder="请输入事件ID" onChange={(e) => this.setState({eventId: e.target.value})} value={this.state.eventId}/>
          				</div>
          				<div className='list'>
          					<span className='title'><b style={{color: '#F00'}}>*</b> 事件名称:</span>          					
    						<Input placeholder="请输入事件名称" onChange={(e) => this.setState({eventName: e.target.value})} value={this.state.eventName}/>    
  						</div>
          				<div className='list'>
          					<span style={{ height: '82px', lineHeight: '82px' }} className='title'>事件用途:</span>
          					<Input type="textarea" rows={4} onChange={(e) => this.setState({eventUse: e.target.value})} value={this.state.eventUse}/>
          				</div>
        			</Modal>
				</div>			
			)
	
	}
}