import NProgress from 'nprogress'
import { message } from 'antd'
import md5 from 'md5'
import API from 'CONSTANT/api'
import { selectOnlineParamAction, createOnlineParamAction, updateOnlineParamAction } from './request/onlineParam'

let onlineParamTable = [],
    chooseOnlineParam = {}

export const chooseOnlineParamAction = (id, cb) => (dispatch, getState) => {
    onlineParamTable.forEach((item) => {
        if(id == item.id){
            chooseOnlineParam = item
        }
    })
    cb(chooseOnlineParam)
    /*dispatch({
        type: 'CHOOSE_CHANNEL_ACTION',
        chooseOnlineParam: chooseOnlineParam
    })*/
}

export const selectOnlineParam = (data, success, fail) => (dispatch, getState) => {
  const postData = {
    platform: data.platform
  }
  dispatch(selectOnlineParamAction(postData)).then(action => {
    NProgress.done()
    const dataBody = action.data.body
    console.log(dataBody)
    onlineParamTable = []
    if (dataBody.errorCode == '0') {
      const onlineParam = {
        id: dataBody.id,
        flush_interval: dataBody.flush_interval,
        flush_size: dataBody.flush_size,
        max_cachesize: dataBody.max_cachesize,
        flush_onlywifi: dataBody.flush_onlywifi,
        update_onlywifi: dataBody.update_onlywifi,
        check_eventbinding: dataBody.check_eventbinding,
        configureURL: dataBody.configureURL
      }
      onlineParamTable.push(onlineParam)
      dispatch({
        type: 'SELECT_ONLINE_PARAM_LIST',
        onlineParamTable: onlineParamTable
      })
    }
  })
}

export const createOnlineParam = (data, success, fail) => (dispatch, getState) => {
  const postData = {
    platform: data.platform,
    flush_interval: data.flush_interval,
    flush_size: data.flush_size,
    max_cachesize: data.max_cachesize,
    flush_onlywifi: data.flush_onlywifi,
    update_onlywifi: data.update_onlywifi,
    check_eventbinding: data.check_eventbinding,
    configureURL: data.configureURL
  }
  dispatch(createOnlineParamAction(postData)).then(action => {
    NProgress.done()
    const dataBody = action.data.body
    console.log(dataBody)
    if (dataBody.errorCode == '0') {
      console.log(dataBody)
      if(success) success()
      dispatch(selectOnlineParamAction({platform: data.platform})).then(action => {
        NProgress.done()
        const dataBody = action.data.body
        onlineParamTable = []
        if (dataBody.errorCode == '0') {
          const onlineParam = {
            id: dataBody.id,
            flush_interval: dataBody.flush_interval,
            flush_size: dataBody.flush_size,
            max_cachesize: dataBody.max_cachesize,
            flush_onlywifi: dataBody.flush_onlywifi,
            update_onlywifi: dataBody.update_onlywifi,
            check_eventbinding: dataBody.check_eventbinding,
            configureURL: dataBody.configureURL
          }
          onlineParamTable.push(onlineParam)
          dispatch({
            type: 'SELECT_ONLINE_PARAM_LIST',
            onlineParamTable: onlineParamTable
          })
        }
      })
    } else {
      if(fail) fail()
    }
  })
}

export const updateOnlineParam = (data, success, fail) => (dispatch, getState) => {
  const postData = {
    platform: data.platform,
    id: data.id,
    flush_interval: data.flush_interval,
    flush_size: data.flush_size,
    max_cachesize: data.max_cachesize,
    flush_onlywifi: data.flush_onlywifi,
    update_onlywifi: data.update_onlywifi,
    check_eventbinding: data.check_eventbinding,
    configureURL: data.configureURL
  }
  dispatch(updateOnlineParamAction(postData)).then(action => {
    NProgress.done()
    const dataBody = action.data.body
    console.log(dataBody)
    if (dataBody.errorCode == '0') {
      console.log(dataBody)
      if(success) success()
      dispatch(selectOnlineParamAction({platform: data.platform})).then(action => {
        NProgress.done()
        const dataBody = action.data.body
        onlineParamTable = []
        if (dataBody.errorCode == '0') {
          const onlineParam = {
            id: dataBody.id,
            flush_interval: dataBody.flush_interval,
            flush_size: dataBody.flush_size,
            max_cachesize: dataBody.max_cachesize,
            flush_onlywifi: dataBody.flush_onlywifi,
            update_onlywifi: dataBody.update_onlywifi,
            check_eventbinding: dataBody.check_eventbinding,
            configureURL: dataBody.configureURL
          }
          onlineParamTable.push(onlineParam)
          dispatch({
            type: 'SELECT_ONLINE_PARAM_LIST',
            onlineParamTable: onlineParamTable
          })
        }
      })
    } else {
      if(fail) fail()
    }
  })
}

const initialState = {
  onlineParamTable: []
}

export default (state = initialState, action) => {
  switch (action.type) {
    case 'SELECT_ONLINE_PARAM_LIST':
      return {
        ...state,
        onlineParamTable: action.onlineParamTable
      }
    default:
      return state
  }
}