import React, { Component } from 'react'
import moment from 'moment'
import ReactEcharts from 'echarts-for-react'
import NProgress from 'nprogress'
import { Tooltip, Icon, Select, DatePicker, Button , Table } from 'antd'
import ImgTab from '../../components/utils/ImgTab1'
import './CrashTrend.scss'
import { Link } from 'react-router'

const columns = [{
  title: '统计时间',
  dataIndex: 'date',
  sorter: (a, b) => a.addUser - b.addUser,
  color:'#fff'
}, {
  title: 'crash次数',
  dataIndex: 'crashClient',
  sorter: (a, b) => a.crashClient - b.crashClient,
},{
  title: '启动次数',
  dataIndex: 'currentClient',
  sorter: (a, b) => a.currentClient - b.currentClient,
}, {
  title: 'crash用户数',
  dataIndex: 'crashUser',
  sorter: (a, b) => a.crashUser - b.crashUser
}, {
  title: 'crash率',
  dataIndex: 'clientPercent',
  sorter: (a, b) => a.clientPercent - b.perUsclientPercenterTime1
}];


const columns1 = [{
  title: '姓名',
  dataIndex: 'name',
  key: 'name',
}, {
  title: '年龄',
  dataIndex: 'age',
  key: 'age',
}, {
  title: '住址',
  dataIndex: 'address',
  key: 'address',
}];

const oneDay = 1000 * 60 * 60 * 24
const timer = () => {
  let current = new Date()
  current.setHours(0)
  current.setMinutes(0)
  current.setSeconds(0)
  current.setMilliseconds(0)
  let end = current.getTime()
  let start = end - 30 * oneDay
  const test = (time) => {
    let myTime = new Date(time)
    let month = (myTime.getMonth() + 1) < 10 ? '0' + (myTime.getMonth() + 1) : (myTime.getMonth() + 1)
    let day = myTime.getDate() < 10 ? '0' + myTime.getDate() : myTime.getDate()
    return ('' + myTime.getFullYear() + '-' + month + '-' + day)
  }
  return {
    start,
    end,
    today: test(end - oneDay),  // 这是由于0点导致现实的时间比实际应该表示的时间大了一天
    startDay: test(start)
  }
}
const initTime = timer()

class CrashTrend extends Component {
  constructor (props) {
    super(props)
    this.state = {
      tabInfo1: [
        {text: 'Crash用户占比', mark: 'userPercent'},
        {text: 'Crash率', mark: 'clientPercent'},
        {text: 'Crash次数', mark: 'crashClient'},
        {text: 'Crash用户数', mark: 'crashUser'}
      ],
      reqInfo: {
        mark: 'userPercent',
        startTime: initTime.start + '',
        endTime: initTime.end + ''
      },
      tableCrash:{
        "ec_platform":"2",
        "ec_appKey":sessionStorage.getItem('appkey'),
        "ec_ranges_start":"1494777600000",
        "ec_ranges_end":"1494864000000",
        "ec_app_version":"all"
      },
      current:"1"
    }
    this.tabClick = this.tabClick.bind(this)
    this.selectChange = this.selectChange.bind(this)
    this.endDateChange = this.endDateChange.bind(this)
    this.staDateChange = this.staDateChange.bind(this)
  }

  tabClick (mark) {
    const { crashTrend, options } = this.props
    this.setState({reqInfo: {
      ...this.state.reqInfo,
      mark: mark
    }})
    crashTrend(mark)
  }
  getClass(num){
      return num == this.state.current ? 'active': ''
    }
  handleClickTab(num){
    console.log(num)
    let app = ['iPad','iPhone','Android']
    this.setState({ current:num })
  }
  selectChange (value) {
    const { crashTrend, verSelect } = this.props
    verSelect(value)
    crashTrend(this.state.reqInfo.mark)
  }

  endDateChange (date) {
    const { crashTrend, endTime } = this.props
    let time = date._d.getTime()
    let myEndTime = Date.now() - time < oneDay ? Date.now() : time + oneDay
    this.setState({
      reqInfo: {
        ...this.state.reqInfo,
        endTime: myEndTime + ''
      }
    })
    let myStaTime = parseInt(this.state.reqInfo.startTime)
    let day = Math.ceil((myEndTime - myStaTime) / oneDay)
    // 通过新的时间算出新的坐标轴
    let arr = []
    for (let i = 0; i < day; i++) {
      let test = new Date(myStaTime)
      let month = (test.getMonth() + 1) < 10 ? '0' + (test.getMonth() + 1) : (test.getMonth() + 1)
      let day = test.getDate() < 10 ? '0' + test.getDate() : test.getDate()
      let dateStr = '' + test.getFullYear() + '-' + month + '-' + day
      arr.push(dateStr)
      myStaTime += oneDay
    }
    setTimeout(() => {
      endTime({
        end: myEndTime + '',
        day,
        arr
      })
      crashTrend(this.state.reqInfo.mark)
    }, 0)
  }

  staDateChange (date) {
    const { crashTrend, staTime } = this.props
    let myStaTime = date._d.getTime()
    this.setState({
      reqInfo: {
        ...this.state.reqInfo,
        startTime: myStaTime + ''
      }
    })
    let myEndTime = parseInt(this.state.reqInfo.endTime)
    let day = Math.ceil((myEndTime - myStaTime) / oneDay)
    let arr = []
    for (let i = 0; i < day; i++) {
      let test = new Date(myStaTime)
      let month = (test.getMonth() + 1) < 10 ? '0' + (test.getMonth() + 1) : (test.getMonth() + 1)
      let day = test.getDate() < 10 ? '0' + test.getDate() : test.getDate()
      let dateStr = '' + test.getFullYear() + '-' + month + '-' + day
      arr.push(dateStr)
      myStaTime += oneDay
    }
    setTimeout(() => {
      staTime({
        sta: myStaTime + '',
        day,
        arr
      })
      crashTrend(this.state.reqInfo.mark)
    }, 0)
  }

  componentWillMount () {
    // location.reload()
    this.props.crashTrend()
    const { crashTrendTable } = this.props
    crashTrendTable(this.state.tableCrash,() => {
        NProgress.done()
    }, () => {
        NProgress.done()
    })
  }

  componentDidMount () {
    // location.reload()
  }

  render () {
    const { tabInfo1 } = this.state
    const { option ,countList } = this.props
    const endDisabledDate = current => current && current.valueOf() > Date.now()
    const startDisabledDate = current => current && current.valueOf() < initTime.start

    return (
      <div className='crashTrend'>
        <header>
            <nav className="device-type clearfix">
                <h3>设备类型</h3>
                <ul className="clearfix">
                  <li className={this.getClass(1)} onClick={e=>this.handleClickTab(1)}><a>iPhone</a></li>
                    <li className={this.getClass(2)} onClick={e=>this.handleClickTab(2)}><a>Android</a></li>
                </ul>
            </nav>
            <Link to="applist/applist.html" className="back"><Button type="primary" ghost>返回APP列表</Button></Link>
        </header>
        <div className='header'>
          <h3>
            Crash趋势
            <Tooltip placement='right' title='只能选择最近30天的趋势'>
              <Icon type='question-circle' />
            </Tooltip>
          </h3>
          <Select defaultValue='all' style={{ width: 120, float: 'right' }} onSelect={(value) => (this.selectChange(value))}>
            <Select.Option value='all'>全部版本</Select.Option>
            <Select.Option value='6.8'>6.8</Select.Option>
            <Select.Option value='6.7'>6.7</Select.Option>
          </Select>
          <DatePicker style={{ float: 'right', marginRight: 40 }} defaultValue={moment(initTime.today, 'YYYY-MM-DD')} disabledDate={endDisabledDate} onChange={(date) => this.endDateChange(date)} />
          <span style={{float: 'right', lineHeight: 2, marginRight: 10}}>至</span>
          <DatePicker style={{ float: 'right', marginRight: 10 }} defaultValue={moment(initTime.startDay, 'YYYY-MM-DD')} disabledDate={startDisabledDate} onChange={(date) => this.staDateChange(date)} />
        </div>
        <div className='crashTrend-img'>
          <ImgTab tabInfo={tabInfo1} click={this.tabClick} />
          <div className='img-content'>
            <h4>Crash趋势</h4>
            <ReactEcharts
              option={option}
              style={{height: '400px'}}
              onChartReady = {chart => {setTimeout(function(){chart.resize()},0)}}
            />
            <div className='crashTrend-table-header'>
              <h5>Crash列表</h5>
              <Button style={{float: 'right', margin: '6px 10px 0 0'}}>导出</Button>
            </div>
            <Table columns={columns} dataSource={countList} key='tableList' />
            <div className="tableFooter"></div>
          </div>
        </div>
{/*        <div className='crashTrend-table'>
          <div className='crashTrend-table-header' >
            <h5>Crash列表</h5>
            <Button style={{float: 'right', margin: '6px 10px 0 0'}}>导出</Button>
            <Select defaultValue='应用版本' style={{ width: 150, float: 'right', margin: '6px 10px 0 0' }}>
              <Option value='应用版本'>应用版本</Option>
              <Option value='发生页面'>发生页面</Option>
              <Option value='操作系统版本'>操作系统版本</Option>
              <Option value='品牌'>品牌</Option>
              <Option value='机型'>机型</Option>
            </Select>
            <h6>选择分布维度：</h6>
          </div>
        </div>*/}
      </div>
    )
  }
  }

export default CrashTrend
