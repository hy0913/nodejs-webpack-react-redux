import NProgress from 'nprogress'
import { netAndOperatorAction } from './request/netAndOperator'

const GET_STATE_DATA = 'GET_STATE_DATA'
const GET_NET_OPTION = 'GET_NET_OPTION'
const GET_OPR_OPTION = 'GET_OPR_OPTION'
const SELECT_CHANGE = 'SELECT_CHANGE'
const TAB_CHANGE = 'TAB_CHANGE'
const TIME_CHANGE = 'TIME_CHANGE'

const getData = (arr) => {
  let data = {
    all: [],
    title: []
  }
  for (let i = 0; i < arr.length; i++) {
    let {count: value, name} = arr[i]
    data.all.push({value: value, name: name})
    data.title.push(name)
  }
  return data
}

export const netAndOperator = (data, success, fail) => (dispatch, getState) => {
  const reqData = getState().netAndOperator.reqData
  dispatch(netAndOperatorAction(reqData)).then(action => {
    NProgress.start()
    const sucData = action.data.body
    const sucData1 = action.data.body.netAndCarrier
    dispatch({
      type: GET_STATE_DATA,
      data: {
        netAndCarrier: sucData.netAndCarrier
      }
    })
    dispatch({
      type: GET_NET_OPTION,
      data: getData(sucData1[1].netAndCarrierSub)
    })
    dispatch({
      type: GET_OPR_OPTION,
      data: getData(sucData1[0].netAndCarrierSub)
    })
    // success()
    NProgress.done()
  })
}

export const selectChange = (data) => ({
  type: SELECT_CHANGE,
  data
})

export const tabChange = (data) => ({
  type: TAB_CHANGE,
  data
})

export const timeChange = (data) => ({
  type: TIME_CHANGE,
  data
})

const timer = () => {
  const oneDay = 1000 * 60 * 60 * 24
  let current = new Date()
  current.setHours(0)
  current.setMinutes(0)
  current.setSeconds(0)
  current.setMilliseconds(0)
  let end = current.getTime()
  return {
    start: end - oneDay,
    end
  }
}
let initObj = timer()

const initialState = {
  reqData: {
    ec_platform: '2',
    ec_appKey: '17882660f8d511e6885744a8420bf25c',
    ec_ranges_start: 1495065600000,
    ec_ranges_end: 1495497600000,
    ec_app_version: 'all',
    ec_net: 'nowDay',
    ec_carrier: 'nowDay',
    beginTime: 1495065600000,
    endTime: 1495497600000
  },
  netOption: {
    series: [
      {
        name: '访问来源',
        type: 'pie',
        hoverAnimation: false,
        radius: '75%',
        data: [ {value:10, name:'rose1'},
                {value:5, name:'rose2'},
                {value:15, name:'rose3'},
                {value:25, name:'rose4'},
                {value:20, name:'rose5'},
                {value:35, name:'rose6'},
                {value:30, name:'rose7'},
                {value:40, name:'rose8'}]
      }
    ],
    color: ['#88c3e8', '#aedd8f', '#00ccff', '#ffbb33', '#00cc00', '#ff5c45'],
    tooltip: {
      formatter: function (params) {
        return params.name + '：' + params.value + '(' + params.percent + '%)'
      }
    },
    legend: {
      data: ['rose1','rose2','rose3','rose4','rose5','rose6','rose7','rose8'],
      bottom: '0%'
    }
  },
  oprOption: {
    series: [
      {
        name: '访问来源',
        type: 'pie',
        hoverAnimation: false,
        radius: '75%',
        data: []
      }
    ],
    color: ['#88c3e8', '#aedd8f', '#00ccff', '#ffbb33', '#00cc00', '#ff5c45'],
    tooltip: {
      formatter: function (params) {
        return params.name + '：' + params.value + '(' + params.percent + '%)'
      }
    },
    legend: {
      data: [],
      bottom: '0%'
    }
  },
  netAndCarrier: []
}

export default (state = initialState, action) => {
  switch (action.type) {
    case GET_STATE_DATA:
      return {
        ...state,
        ...action.data
      }
    case GET_NET_OPTION:
      return {
        ...state,
        netOption: {
          ...state.netOption,
          series: {
            ...state.netOption.series,
            data: action.data.all
          },
          legend: {
            ...state.netOption.legend,
            data: action.data.title
          }
        }
      }
    case GET_OPR_OPTION:
      return {
        ...state,
        oprOption: {
          ...state.oprOption,
          series: {
            ...state.oprOption.series,
            data: action.data.all
          },
          legend: {
            ...state.oprOption.legend,
            data: action.data.title
          }
        }
      }
    case SELECT_CHANGE:
      return {
        ...state,
        reqData: {
          ...state.reqData,
          ec_app_version: action.data
        }
      }
    case TIME_CHANGE:
      return {
        ...state,
        reqData: {
          ...state.reqData,
          ec_ranges_end: action.data.ec_ranges_end,
          ec_ranges_start: action.data.ec_ranges_start
        }
      }
    case TAB_CHANGE:
      return {
        ...state,
        reqData: {
          ...state.reqData,
          ec_ranges_end: action.data.ec_ranges_end,
          ec_ranges_start: action.data.ec_ranges_start
        }
      }
    default:
      return state
  }
}
